generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üè¢ MULTI-TENANT COMPANY MODEL
model Company {
  id          String   @id @default(cuid())
  name        String   @unique  // "ABC Company", "XYZ Corp", etc.
  slug        String   @unique  // "abc-company", "xyz-corp" for URLs
  domain      String?  @unique  // "abc.com" for email-based assignment
  plan        Plan     @default(BASIC)
  
  // Company settings
  maxWallets  Int      @default(50)
  maxPools    Int      @default(100)
  isActive    Boolean  @default(true)
  
  // Relations
  users       User[]
  projects    Project[]
  wallets     ClientWallet[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("companies")
}

// üë• CLIENT WALLETS MANAGED BY COMPANIES
model ClientWallet {
  id            String   @id @default(cuid())
  address       String
  clientName    String
  status        String   @default("active") // active, warning, critical
  totalValue    Float    @default(0)
  lastUpdated   DateTime @default(now())
  
  // Company association
  companyId     String
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Metadata
  addedBy       String   // User ID who added this wallet
  notes         String?
  tags          String[] // ["high-value", "institutional", etc.]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Each company can have multiple wallets with the same address (different clients)
  @@unique([companyId, address, clientName])
  @@map("client_wallets")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  password    String
  plan        Plan     @default(BASIC)
  
  // üè¢ COMPANY ASSOCIATION
  companyId   String?
  company     Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  // Role within the company
  role        UserRole @default(MEMBER)
  permissions String[] // JSON array of permissions
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  projects    Project[]
  alerts      Alert[]
  
  @@map("users")
}

model Project {
  id              String   @id @default(cuid())
  name            String
  tokenAddress    String   @unique
  tokenSymbol     String
  tokenName       String
  chain           String
  description     String?
  website         String?
  twitter         String?
  
  // User and Company Association
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  companyId       String?
  company         Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  pools           Pool[]
  alerts          Alert[]
  healthChecks    HealthCheck[]
  emergencyActions EmergencyAction[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("projects")
}

// üíß POOLS WITH COMPANY ISOLATION
model Pool {
  id              String   @id @default(cuid())
  address         String   @unique
  dex             String   // uniswap, sushiswap, pancakeswap, etc.
  version         String?  // v2, v3, etc.
  pairAddress     String
  token0Address   String
  token1Address   String
  token0Symbol    String
  token1Symbol    String
  feePercentage   Float
  chain           String
  
  projectId       String
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  liquidityData   LiquidityData[]
  healthChecks    HealthCheck[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("pools")
}

model LiquidityData {
  id              String   @id @default(cuid())
  poolId          String
  pool            Pool     @relation(fields: [poolId], references: [id], onDelete: Cascade)
  
  totalLiquidity  Float
  token0Reserve   Float
  token1Reserve   Float
  volume24h       Float
  lpCount         Int
  slippage1Percent Float
  slippage5Percent Float
  priceImpact     Float
  
  timestamp       DateTime @default(now())
  
  @@map("liquidity_data")
}

model HealthCheck {
  id              String           @id @default(cuid())
  projectId       String
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  poolId          String?
  pool            Pool?            @relation(fields: [poolId], references: [id], onDelete: Cascade)
  
  status          HealthStatus
  liquidityScore  Float
  slippageScore   Float
  volumeScore     Float
  overallScore    Float
  
  issues          Json[] // Array of identified issues
  recommendations Json[] // Array of recommendations
  
  timestamp       DateTime @default(now())
  
  @@map("health_checks")
}

model Alert {
  id              String      @id @default(cuid())
  type            AlertType
  severity        AlertSeverity
  title           String
  message         String
  data            Json?       // Additional alert data
  
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId       String
  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  isRead          Boolean     @default(false)
  isResolved      Boolean     @default(false)
  resolvedAt      DateTime?
  
  createdAt       DateTime    @default(now())
  
  @@map("alerts")
}

model EmergencyAction {
  id               String           @id @default(cuid())
  type             EmergencyType
  status           ActionStatus
  
  projectId        String
  project          Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  triggerReason    String
  actionTaken      String
  amountInjected   Float?
  txHash           String?
  gasUsed          Float?
  
  startedAt        DateTime         @default(now())
  completedAt      DateTime?
  
  @@map("emergency_actions")
}

// üìä ENUMS
enum Plan {
  BASIC
  PRO
  ENTERPRISE
}

enum UserRole {
  MEMBER      // Regular company member
  ADMIN       // Company admin (can manage company wallets/pools)
  OWNER       // Company owner (full access)
  SUPER_ADMIN // LiquidFlow platform admin (access all companies)
}

enum HealthStatus {
  HEALTHY
  WARNING
  CRITICAL
}

enum AlertType {
  LIQUIDITY_DROP
  HIGH_SLIPPAGE
  LP_EXIT
  VOLUME_SPIKE
  PRICE_IMPACT
  EMERGENCY_TRIGGERED
}

enum AlertSeverity {
  INFO
  WARNING
  CRITICAL
}

enum EmergencyType {
  LIQUIDITY_INJECTION
  INCENTIVE_BOOST
  LP_PROTECTION
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}
